

This file is not used
vulkan initialization has been moved to using vk bootstrap





















#include "renderer.hpp"
#include "utils/heph_error.hpp"
#include "utils/heph_defines.hpp"
#include "utils/heph_utils.hpp"

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#include <string>
#include <iostream>
#include <string.h>
#include <span>

Renderer::Renderer()
{
    init_instance();
    init_pdevice();
    init_device_and_queue();
}

#define REQUIRED_QUEUE_FAMILY_BITFLAGS (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT)

static void
init_app_info(VkApplicationInfo &info)
{
    ZERO_INIT(&info, sizeof(VkApplicationInfo))
    info.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
    info.pApplicationName = "Hephaestus Renderer";
    info.applicationVersion = VK_MAKE_API_VERSION(0, 1, 3, 0);
    info.pEngineName = "Hephaestus Engine";
    info.engineVersion = VK_MAKE_API_VERSION(0, 1, 3, 0);
    info.apiVersion = VK_MAKE_API_VERSION(0, 1, 3, 0);
}

static std::vector<const char *>
get_required_instance_extensions()
{
#ifdef HEPH_OSX
    #define extensions_count 2
    std::vector<const char *> extensions = {VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME, VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME};
#else
    #define extensions_count 0
    std::vector<const char *> extensions;
#endif
    uint32_t glfw_extension_count = 0;
    const char **glfw_extensions = glfwGetRequiredInstanceExtensions(&glfw_extension_count);
    extensions.resize(glfw_extension_count + extensions_count);
    void *ptr = (void *)(extensions.data() + extensions_count);
    memcpy(ptr, glfw_extensions, glfw_extension_count * sizeof(char *));
    return extensions;
}

static bool
verify_instance_extensions_available(const std::vector<const char *> &required, const std::vector<VkExtensionProperties> &available)
{
    for (auto re : required)
    {
        bool is_available = false;
        for (auto ae : available)
        {
            if (!strcmp(re, ae.extensionName))
            {
                is_available = true;
                break;
            }
        }
        if (!is_available)
        {
            HEPH_PRINT_ERROR("Extension not found: '" << re << "'.");
            return false;
        }
    }
    return true;
}

static std::vector<VkExtensionProperties>
get_available_instance_extensions()
{
    uint32_t available_extension_count = 0;
    vkEnumerateInstanceExtensionProperties(nullptr, &available_extension_count, nullptr);
    std::vector<VkExtensionProperties> available_extensions;
    available_extensions.resize(available_extension_count);
    vkEnumerateInstanceExtensionProperties(nullptr, &available_extension_count, available_extensions.data());
    return available_extensions;
}

void 
Renderer::init_instance()
{
    VkApplicationInfo app_info;
    init_app_info(app_info);

    std::vector<const char *> extensions = get_required_instance_extensions();
    std::vector<VkExtensionProperties> available_extensions = get_available_instance_extensions();

    if (!verify_instance_extensions_available(extensions, available_extensions))
    {
        HEPH_THROW_FATAL_ERROR("Not all required extensions available.");
    }

#if HEPH_MONITOR
    const char *const layers[] = {"VK_LAYER_KHRONOS_validation", "VK_LAYER_LUNARG_monitor"};
#elif HEPH_VALIDATE
    const char *const layers[] = {"VK_LAYER_KHRONOS_validation"};
#endif

#ifdef HEPH_OSX
    const uint32_t flags = VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR;
#else
    const uint32_t flags = 0;
#endif

    VkInstanceCreateInfo create_info;
    ZERO_INIT(&create_info, sizeof(VkInstanceCreateInfo));
    create_info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    create_info.pApplicationInfo = &app_info;
    create_info.enabledExtensionCount = extensions.size();
    create_info.ppEnabledExtensionNames = extensions.data();
    create_info.enabledLayerCount = sizeof(layers) / sizeof(char *);
    create_info.ppEnabledLayerNames = layers;
    create_info.flags = flags;

// might have something to do with layer crap
// The loader is responsible for dispatching all core and instance extension Vulkan functions to the first entity in the call chain.

    if (vkCreateInstance(&create_info, nullptr, &instance) != VK_SUCCESS)
    {
        HEPH_THROW_FATAL_ERROR("Cannot create the Vulkan instance.")
    }
}

static auto
filter_pdevices_queue_bitflags(std::vector<VkPhysicalDevice> &pdevices)
{
    size_t k = 0;
    std::vector<VkQueueFamilyProperties> family_props;
    for (size_t i = 0; i < pdevices.size(); i++)
    {
        uint32_t property_count = 0;
        vkGetPhysicalDeviceQueueFamilyProperties(pdevices[i], &property_count, nullptr);

        family_props.resize(property_count);
        vkGetPhysicalDeviceQueueFamilyProperties(pdevices[i], &property_count, family_props.data());

        for (size_t j = 0; j < family_props.size(); j++)
        {
            VkQueueFlags flags = family_props[j].queueFlags;
            if ((flags & REQUIRED_QUEUE_FAMILY_BITFLAGS) == REQUIRED_QUEUE_FAMILY_BITFLAGS)
            {
                pdevices[k++] = pdevices[i];
                break;
            }
        }

        family_props.clear();
    }

    return std::span(pdevices.data(), k);
}

static VkPhysicalDevice
get_best_pdevice(const std::span<VkPhysicalDevice> pdevices)
{
    uint32_t best_score = 0;
    VkPhysicalDevice best_device;
    const uint32_t device_scores[5] = {2, 4, 5, 3, 1};
    for (const VkPhysicalDevice device : pdevices)
    {
        VkPhysicalDeviceProperties properties;
        vkGetPhysicalDeviceProperties(device, &properties);
        uint32_t device_score = device_scores[properties.deviceType];
        if (best_score < device_score)
        {
            best_score = device_score;
            best_device = device;
        }
    }
    return best_device;
}

void 
Renderer::init_pdevice()
{
    uint32_t pdevice_count = 0;
    vkEnumeratePhysicalDevices(instance, &pdevice_count, NULL);

    if (pdevice_count == 0)
    {
        HEPH_THROW_FATAL_ERROR("There are no physical devices that support Vulkan.")
    }

    std::vector<VkPhysicalDevice> pdevices(pdevice_count);
    vkEnumeratePhysicalDevices(instance, &pdevice_count, pdevices.data());

    auto filtered_devices = filter_pdevices_queue_bitflags(pdevices);

    if (filtered_devices.size() == 0)
    {
        HEPH_THROW_FATAL_ERROR("Your device supports Vulkan, but is unsuitable to run Hephaestus.")
    }   

    if (filtered_devices.size() == 1)
    {
        pdevice = filtered_devices[0];
        return;
    }

    if ((pdevice = get_best_pdevice(filtered_devices)) == VK_NULL_HANDLE)
    {
        HEPH_THROW_FATAL_ERROR("Your device supports Vulkan, but is unsuitable to run Hephaestus.")
    }  

#if HEPH_VALIDATE
    VkPhysicalDeviceProperties temp;
    vkGetPhysicalDeviceProperties(pdevice, &temp);
    std::cout << "Using physical device: " << temp.deviceName << '\n';
#endif

}

static void
init_queue_create_info(VkDeviceQueueCreateInfo &info, const uint32_t index)
{
    ZERO_INIT(&info, sizeof(VkDeviceQueueCreateInfo));
    info.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    info.queueFamilyIndex = index;
    info.queueCount = 1;
    float priority = 1.0;
    info.pQueuePriorities = &priority;
}

static void
init_device_create_info(VkDeviceCreateInfo &info, const VkDeviceQueueCreateInfo *const qinfo, const VkPhysicalDeviceFeatures *const features, bool include_port_subset)
{
    ZERO_INIT(&info, sizeof(VkDeviceCreateInfo));
    info.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    info.pQueueCreateInfos = qinfo;
    info.queueCreateInfoCount = 1;
    info.pEnabledFeatures = features;
    info.enabledExtensionCount = 0;
    // if (include_port_subset)
    // {
    //     info.enabledExtensionCount = 1;
    //     char *name = (char *)malloc(26);
    //     memcpy(name, "VK_KHR_portability_subset", 26);
    //     info.ppEnabledExtensionNames = ;
    // }
    // else 
    // {
    //     info.enabledExtensionCount = 0;
    // }
}

void
Renderer::init_device_and_queue()
{

    uint32_t ext_prop_count = 0;
    vkEnumerateDeviceExtensionProperties(pdevice, NULL, &ext_prop_count, NULL);

    std::vector<VkExtensionProperties> ext_props(ext_prop_count);
    vkEnumerateDeviceExtensionProperties(pdevice, NULL, &ext_prop_count, ext_props.data());

    bool include_port_subset = false;
    for (VkExtensionProperties props : ext_props)
    {
        if (!strcmp(props.extensionName, "VK_KHR_portability_subset"))
        {
            include_port_subset = true;
            break;
        }
    }   

    uint32_t property_count = 0;
    vkGetPhysicalDeviceQueueFamilyProperties(pdevice, &property_count, NULL);

    std::vector<VkQueueFamilyProperties> family_props(property_count);
    vkGetPhysicalDeviceQueueFamilyProperties(pdevice, &property_count, family_props.data());

    uint32_t family_index = 0;
    for (VkQueueFamilyProperties props : family_props)
    {
        VkQueueFlags flags = props.queueFlags;
        if ((flags & REQUIRED_QUEUE_FAMILY_BITFLAGS) == REQUIRED_QUEUE_FAMILY_BITFLAGS)
            break;
        family_index++;
    }

    VkDeviceQueueCreateInfo queue_create_info;
    init_queue_create_info(queue_create_info, family_index);

    VkPhysicalDeviceFeatures device_features;
    vkGetPhysicalDeviceFeatures(pdevice, &device_features);

    VkDeviceCreateInfo device_create_info;
    init_device_create_info(device_create_info, &queue_create_info, &device_features, include_port_subset);
    if (vkCreateDevice(pdevice, &device_create_info, NULL, &device) != VK_SUCCESS)
    {
        HEPH_THROW_FATAL_ERROR("Unable to create the logical device.");
    }


    vkGetDeviceQueue(device, queue_create_info.queueFamilyIndex, 0, &queue);
}

void
Renderer::
{

}

void Renderer::destroy()
{
    /* = Make sure the device work is completed before destroying stuff = */
    vkDeviceWaitIdle(device);

    vkDestroyDevice(device, nullptr);
    vkDestroyInstance(instance, nullptr);
}